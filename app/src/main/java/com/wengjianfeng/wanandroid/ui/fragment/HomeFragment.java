package com.wengjianfeng.wanandroid.ui.fragment;import android.content.Intent;import android.graphics.Color;import android.os.Bundle;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.util.Log;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import com.blankj.utilcode.util.ToastUtils;import com.chad.library.adapter.base.BaseQuickAdapter;import com.ethanhua.skeleton.Skeleton;import com.ethanhua.skeleton.SkeletonScreen;import com.wengjianfeng.wanandroid.R;import com.wengjianfeng.wanandroid.helper.ApiUtil;import com.wengjianfeng.wanandroid.manager.UserInfoManager;import com.wengjianfeng.wanandroid.model.pojo.ArticleBean;import com.wengjianfeng.wanandroid.model.pojo.BannerBean;import com.wengjianfeng.wanandroid.model.BaseResponse;import com.wengjianfeng.wanandroid.model.pojovo.ArticleListBean;import com.wengjianfeng.wanandroid.ui.activity.LoginActivity;import com.wengjianfeng.wanandroid.ui.activity.WebActivity;import com.wengjianfeng.wanandroid.ui.adapter.ArticleAdapter;import com.wengjianfeng.wanandroid.manager.GlideImageLoaderManager;import com.wengjianfeng.wanandroid.ui.event.ScrollArticleEvent;import com.wengjianfeng.wanandroid.ui.event.UserEvent;import com.youth.banner.Banner;import com.youth.banner.BannerConfig;import com.youth.banner.listener.OnBannerListener;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import org.greenrobot.eventbus.ThreadMode;import java.util.ArrayList;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.Unbinder;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;public class HomeFragment extends Fragment        implements BaseQuickAdapter.RequestLoadMoreListener {    public static final String TAG = "HomeFragment";    private static final String ARG_PARAM1 = "param1";    private static final String ARG_PARAM2 = "param2";    private String mParam1;    private String mParam2;    private Unbinder bind;    private SkeletonScreen skeletonScreen;    private ArticleAdapter mArticleAdapter;    private ArrayList<ArticleBean> mArticleList;    private Banner mBanner;    private View headerView;    private boolean bannerDataRequestSuccess;    private boolean articleDataRequestSuccess;    @BindView(R.id.recyclerView_article)    RecyclerView mRecyclerViewArticle;    @BindView(R.id.swipeRefreshLayout_article)    SwipeRefreshLayout mSwipeRefreshLayoutArticle;    private int curPage = 0;    private int pageCount=0;    public HomeFragment() {    }    public static HomeFragment newInstance(String param1, String param2) {        HomeFragment fragment = new HomeFragment();        Bundle args = new Bundle();        args.putString(ARG_PARAM1, param1);        args.putString(ARG_PARAM2, param2);        fragment.setArguments(args);        return fragment;    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        if (getArguments() != null) {            mParam1 = getArguments().getString(ARG_PARAM1);            mParam2 = getArguments().getString(ARG_PARAM2);        }    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        View view = inflater.inflate(R.layout.fragment_home, container, false);        bind = ButterKnife.bind(this, view);        mArticleList = new ArrayList<>();        LinearLayoutManager layoutManager = new LinearLayoutManager(getActivity());        mRecyclerViewArticle.setLayoutManager(layoutManager);        mArticleAdapter = new ArticleAdapter(getActivity(), mArticleList);        mArticleAdapter.setEnableLoadMore(true);        mArticleAdapter.setOnLoadMoreListener(this, mRecyclerViewArticle);        mRecyclerViewArticle.setAdapter(mArticleAdapter);        mArticleAdapter.setOnItemClickListener(new BaseQuickAdapter.OnItemClickListener() {            @Override            public void onItemClick(BaseQuickAdapter adapter, View view, int position) {                ArticleBean article = (ArticleBean) adapter.getData().get(position);                String url = article.getLink();                String title = article.getTitle();                Intent intent = new Intent(getActivity(), WebActivity.class);                intent.putExtra("url", url);                intent.putExtra("title", title);                startActivity(intent);            }        });        skeletonScreen = Skeleton.bind(mRecyclerViewArticle)                .adapter(mArticleAdapter)                .shimmer(true)                .angle(20)                .frozen(false)                .duration(1200)                .count(10)                .load(R.layout.item_skeleton_article)                .show(); //default count is 10        mArticleAdapter.setOnItemChildClickListener(new BaseQuickAdapter.OnItemChildClickListener() {            @Override            public void onItemChildClick(final BaseQuickAdapter adapter, View view, final int position) {                if (!UserInfoManager.isLogin()) {                    ToastUtils.showShort("请先登录");                    startActivity(new Intent(getActivity(), LoginActivity.class));                    return;                }                if (mArticleAdapter.getData().get(position).isCollect()) {                    ApiUtil.unCollectArticleData(                            new Callback<BaseResponse<ArticleListBean>>() {                                @Override                                public void onResponse(Call<BaseResponse<ArticleListBean>> call, Response<BaseResponse<ArticleListBean>> response) {                                    ToastUtils.showShort("取消收藏");                                    mArticleAdapter.getData().get(position).setCollect(false);                                    adapter.notifyItemChanged(position+1);                                }                                @Override                                public void onFailure(Call<BaseResponse<ArticleListBean>> call, Throwable t) {                                }                            },mArticleAdapter.getData().get(position).getId());                } else {                    ApiUtil.collectArticleData(                            new Callback<BaseResponse<ArticleListBean>>() {                                @Override                                public void onResponse(Call<BaseResponse<ArticleListBean>> call, Response<BaseResponse<ArticleListBean>> response) {                                    ToastUtils.showShort("收藏");                                    mArticleAdapter.getData().get(position).setCollect(true);                                    adapter.notifyItemChanged(position+1);                                }                                @Override                                public void onFailure(Call<BaseResponse<ArticleListBean>> call, Throwable t) {                                }                            }, mArticleAdapter.getData().get(position).getId());                }            }        });        headerView = View.inflate(getActivity(), R.layout.layout_banner, null);        mBanner = headerView.findViewById(R.id.banner_home);        mBanner.setBannerStyle(BannerConfig.CIRCLE_INDICATOR_TITLE_INSIDE);        return view;    }    @Override    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);    }    @Override    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        mSwipeRefreshLayoutArticle.setColorSchemeColors(getContext().getResources().getColor(R.color.white));        mSwipeRefreshLayoutArticle.setDistanceToTriggerSync(150);        mSwipeRefreshLayoutArticle.setProgressBackgroundColorSchemeColor(Color.WHITE);        mSwipeRefreshLayoutArticle.setProgressBackgroundColorSchemeResource(R.color.colorPrimary);        mSwipeRefreshLayoutArticle.setSize(SwipeRefreshLayout.DEFAULT);        mSwipeRefreshLayoutArticle.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {            @Override            public void onRefresh() {                curPage = 0;                initData();            }        });        mArticleAdapter.setHeaderFooterEmpty(true, true);        mArticleAdapter.setEmptyView(R.layout.view_load_empty);        /*mPtrClassicFrameLayoutArticle.setLastUpdateTimeRelateObject(this);        mPtrClassicFrameLayoutArticle.setPtrHandler(new PtrDefaultHandler() {            @Override            public void onRefreshBegin(PtrFrameLayout frame) {                curPage = 0;                initData();            }        });*/        initData();    }    private void initData() {        bannerDataRequestSuccess = false;        articleDataRequestSuccess = false;        ApiUtil.getBannerData(new Callback<BaseResponse<List<BannerBean>>>() {            @Override            public void onResponse(Call<BaseResponse<List<BannerBean>>> call,                                   Response<BaseResponse<List<BannerBean>>> response) {                bannerDataRequestSuccess = true;                Log.e(TAG, "onResponse: banner请求成功");                if (bannerDataRequestSuccess && articleDataRequestSuccess) {                    Log.e(TAG, "onResponse: 停止刷新");//                    mPtrClassicFrameLayoutArticle.refreshComplete();                    mSwipeRefreshLayoutArticle.setRefreshing(false);                }                final List<BannerBean> bannerBeanList = response.body().getData();                List<String> imagePathList = new ArrayList<>();                List<String> titleList = new ArrayList<>();                for (BannerBean bannerBean : bannerBeanList) {                    imagePathList.add(bannerBean.getImagePath());                    titleList.add(bannerBean.getTitle());                }                mArticleAdapter.removeAllHeaderView();                mArticleAdapter.addHeaderView(headerView);                mArticleAdapter.notifyDataSetChanged();                mBanner.setImages(imagePathList)                        .setBannerTitles(titleList)                        .setImageLoader(new GlideImageLoaderManager())                        .start();                mBanner.setOnBannerListener(new OnBannerListener() {                    @Override                    public void OnBannerClick(int position) {                        String url = bannerBeanList.get(position).getUrl();                        String title = bannerBeanList.get(position).getTitle();                        Intent intent = new Intent(getActivity(), WebActivity.class);                        intent.putExtra("url", url);                        intent.putExtra("title", title);                        startActivity(intent);                    }                });            }            @Override            public void onFailure(Call<BaseResponse<List<BannerBean>>> call, Throwable t) {                bannerDataRequestSuccess = true;                Log.e(TAG, "onResponse: banner请求失败");                if (bannerDataRequestSuccess && articleDataRequestSuccess) {                    Log.e(TAG, "onResponse: 停止刷新");//                    mPtrClassicFrameLayoutArticle.refreshComplete();                    mSwipeRefreshLayoutArticle.setRefreshing(false);                }            }        });        mArticleList.clear();        ApiUtil.getArticleListData(new Callback<BaseResponse<ArticleListBean>>() {            @Override            public void onResponse(Call<BaseResponse<ArticleListBean>> call,                                   Response<BaseResponse<ArticleListBean>> response) {                articleDataRequestSuccess = true;                Log.e(TAG, "onResponse: article请求成功");                if (bannerDataRequestSuccess && articleDataRequestSuccess) {                    Log.e(TAG, "onResponse: 停止刷新");//                    mPtrClassicFrameLayoutArticle.refreshComplete();                    mSwipeRefreshLayoutArticle.setRefreshing(false);                }                pageCount = response.body().getData().getPageCount();                mArticleList.addAll(response.body().getData().getDatas());                mArticleAdapter.notifyDataSetChanged();                mRecyclerViewArticle.postDelayed(new Runnable() {                    @Override                    public void run() {                        skeletonScreen.hide();                    }                },1000);                mRecyclerViewArticle.setOnTouchListener(new View.OnTouchListener() {                    @Override                    public boolean onTouch(View v, MotionEvent event) {                        return mSwipeRefreshLayoutArticle.isRefreshing();                    }                });            }            @Override            public void onFailure(Call<BaseResponse<ArticleListBean>> call, Throwable t) {                articleDataRequestSuccess = true;                Log.e(TAG, "onResponse: article请求失败");                if (bannerDataRequestSuccess && articleDataRequestSuccess) {                    Log.e(TAG, "onResponse: 停止刷新");//                    mPtrClassicFrameLayoutArticle.refreshComplete();                    mSwipeRefreshLayoutArticle.setRefreshing(false);                }            }        }, 0);    }    @Override    public void onResume() {        super.onResume();        if (!EventBus.getDefault().isRegistered(this)) {            EventBus.getDefault().register(this);        }    }    @Override    public void onPause() {        super.onPause();        Log.e(TAG, "onPause: ---------------------");    }    @Override    public void onDestroyView() {        super.onDestroyView();        Log.e(TAG, "onDestroyView: --------------------");    }    @Override    public void onDestroy() {        super.onDestroy();        bind.unbind();        EventBus.getDefault().unregister(this);    }    @Override    public void onLoadMoreRequested() {        loadMoreData();    }    private void loadMoreData() {//        mPtrClassicFrameLayoutArticle.setEnabled(false);        mSwipeRefreshLayoutArticle.setEnabled(false);        if (curPage == pageCount){            mArticleAdapter.loadMoreEnd(true);            return;        }        curPage++;        ApiUtil.getArticleListData(new Callback<BaseResponse<ArticleListBean>>() {            @Override            public void onResponse(Call<BaseResponse<ArticleListBean>> call,                                   Response<BaseResponse<ArticleListBean>> response) {//                mPtrClassicFrameLayoutArticle.setEnabled(true);                mSwipeRefreshLayoutArticle.setEnabled(true);                mArticleAdapter.loadMoreComplete();                mArticleList.addAll(response.body().getData().getDatas());                mArticleAdapter.notifyDataSetChanged();//                skeletonScreen.hide();            }            @Override            public void onFailure(Call<BaseResponse<ArticleListBean>> call, Throwable t) {                articleDataRequestSuccess = true;                Log.e(TAG, "onResponse: article请求成功");                if (bannerDataRequestSuccess && articleDataRequestSuccess) {                    Log.e(TAG, "onResponse: 停止刷新");//                    mPtrClassicFrameLayoutArticle.refreshComplete();                    mSwipeRefreshLayoutArticle.setRefreshing(false);                }            }        }, curPage);    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onScrollEvent(ScrollArticleEvent event){        mRecyclerViewArticle.smoothScrollToPosition(0);    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onUserEvent(UserEvent event){        initData();    }}